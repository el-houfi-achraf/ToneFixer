#!/usr/bin/env node

/**
 * Script de test final pour ToneFixer
 * V√©rifie que tout fonctionne correctement
 */

const fs = require("fs");
const path = require("path");

function checkFile(filePath, description) {
  const exists = fs.existsSync(filePath);
  console.log(`${exists ? "‚úÖ" : "‚ùå"} ${description}: ${filePath}`);
  return exists;
}

function getFileSize(filePath) {
  const stats = fs.statSync(filePath);
  return Math.round(stats.size / 1024);
}

console.log("üöÄ ToneFixer - Test de Validation Final\n");
console.log("=" * 60);

// Test des fichiers de build
console.log("üì¶ V√âRIFICATION DES FICHIERS DE BUILD:");
const buildFiles = [
  ["dist/manifest.json", "Manifest"],
  ["dist/background.js", "Service Worker"],
  ["dist/content.js", "Script de contenu"],
  ["dist/popup.js", "Interface popup"],
  ["dist/widget.js", "Widget flottant"],
  ["dist/popup.html", "Page popup"],
  ["dist/widget.html", "Page widget"],
  ["dist/content.css", "Styles de contenu"],
];

let allFilesOk = true;
buildFiles.forEach(([file, desc]) => {
  if (!checkFile(file, desc)) allFilesOk = false;
});

if (!allFilesOk) {
  console.log("\n‚ùå ERREUR: Fichiers manquants. Ex√©cutez: npm run build");
  process.exit(1);
}

// Test des tailles
console.log("\nüìä TAILLES DES FICHIERS:");
[
  "dist/background.js",
  "dist/content.js",
  "dist/popup.js",
  "dist/widget.js",
].forEach((file) => {
  const size = getFileSize(file);
  const status = size > 5 ? "‚úÖ" : "‚ö†Ô∏è";
  console.log(`${status} ${path.basename(file)}: ${size} KB`);
});

// Test du manifest
console.log("\nüìã CONFIGURATION MANIFEST:");
try {
  const manifest = JSON.parse(fs.readFileSync("dist/manifest.json", "utf8"));

  console.log(`‚úÖ Version: ${manifest.version}`);
  console.log(`‚úÖ Permissions: ${manifest.permissions?.length || 0}`);
  console.log(`‚úÖ Host Permissions: ${manifest.host_permissions?.length || 0}`);
  console.log(`‚úÖ Content Scripts: ${manifest.content_scripts?.length || 0}`);

  // V√©rifier les permissions essentielles
  const hasStorage = manifest.permissions?.includes("storage");
  const hasActiveTab = manifest.permissions?.includes("activeTab");
  const hasScripting = manifest.permissions?.includes("scripting");

  console.log(`${hasStorage ? "‚úÖ" : "‚ùå"} Permission storage`);
  console.log(`${hasActiveTab ? "‚úÖ" : "‚ùå"} Permission activeTab`);
  console.log(`${hasScripting ? "‚úÖ" : "‚ùå"} Permission scripting`);

  // V√©rifier les domaines support√©s
  const supportedDomains = [
    "https://mail.google.com/*",
    "https://slack.com/*",
    "https://linkedin.com/*",
    "https://github.com/*",
  ];

  console.log("\nüåê DOMAINES SUPPORT√âS:");
  supportedDomains.forEach((domain) => {
    const supported = manifest.host_permissions?.includes(domain);
    console.log(`${supported ? "‚úÖ" : "‚ùå"} ${domain}`);
  });
} catch (error) {
  console.log(`‚ùå Erreur manifest: ${error.message}`);
}

// Instructions finales
console.log("\nüéØ PROCHAINES √âTAPES:");
console.log("1. Ex√©cutez: setup-complete.bat");
console.log("2. Ou manuellement:");
console.log("   - Allez √† chrome://extensions/");
console.log('   - Activez "Mode d√©veloppeur"');
console.log('   - Cliquez "Charger l\'extension non empaquet√©e"');
console.log('   - S√©lectionnez le dossier "dist"');

console.log("\nüîß CONFIGURATION API:");
console.log("Cl√© API Gemini: AIzaSyBcixvKdxO0Nc9UxF6OJIUu7Qjff6h4xgo");
console.log("Fournisseur: Gemini");

console.log("\nüß™ TEST RECOMMAND√â:");
console.log("1. Gmail: https://mail.google.com");
console.log("2. Composez un nouveau message");
console.log('3. Tapez: "Hey, j\'ai besoin de √ßa MAINTENANT!"');
console.log("4. Le widget ToneFixer devrait appara√Ætre");

console.log('\nüö® EN CAS DE "Plateforme d√©sactiv√©e":');
console.log("1. Ex√©cutez: fix-platform-disabled.bat");
console.log("2. Rechargez l'extension (‚Üª sur chrome://extensions/)");
console.log("3. Rafra√Æchissez la page web");
console.log("4. V√©rifiez la console Chrome (F12)");

console.log("\n‚úÖ VALIDATION TERMIN√âE - Extension pr√™te √† installer!");
console.log("üìö Documentation: TROUBLESHOOTING.md, INSTALLATION_GUIDE.md");
